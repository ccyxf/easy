/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 /*BFS
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        
        int result=0;
        Queue<TreeNode> nodes=new LinkedList<TreeNode>();
        
        nodes.offer(root);
        
        while(!nodes.isEmpty()){
            result++;
            int count=nodes.size();
            for(int i=0;i<count;i++){
                TreeNode temp=nodes.poll();
                if(temp.left==null&&temp.right==null) return result;
                else{
                    if(temp.left!=null) nodes.offer(temp.left);
                    if(temp.right!=null) nodes.offer(temp.right);
                }
            }
        }
        return -1;
    }
}
*/
public class Solution {
    public int minDepth(TreeNode root) {
        if(root==null) return 0;
        
        return root.left==null||root.right==null?minDepth(root.left)+minDepth(root.right)+1:Math.min(minDepth(root.left),minDepth(root.right))+1;
    }
}
