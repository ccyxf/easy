//DFS,O(N)
public class Solution {
    public boolean isBalanced(TreeNode root) {
        //if(root==null) return true;
        
        return height(root)!=-1;
    }
    public int height(TreeNode root){
        if(root==null) return 0;
        
        int left=height(root.left);
        if(left==-1) return -1;
        int right=height(root.right);
        if(right==-1) return -1;
        
        if(Math.abs(left-right)>1) return -1;
        
        return Math.max(left,right)+1;
    }
}

/*
//BFS,O(N^2)
public class Solution {
    public boolean isBalanced(TreeNode root) {
        if(root==null) return true;
        
         return Math.abs(height(root.left)-height(root.right))<=1&&isBalanced(root.left)&&isBalanced(root.right);
    }
    
    public int height(TreeNode root){
        if(root==null) return 0;
        
        return Math.max(height(root.left),height(root.right))+1;
    }
}
*/
